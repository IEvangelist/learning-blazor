<!--  Copyright (c) 2021 David Pine. All rights reserved.
      Licensed under the MIT License.
-->

@inherits LocalizableComponentBase<TaskListComponent>

<span class="navbar-item">
    <button class="button is-primary is-rounded"
            title=@Localizer["TaskList"] @onclick=Show>
        <span class="icon">
            <i class="fas fa-lg fa-tasks"></i>
        </span>
    </button>
    @if (_todos?.Any(idTodoPair => !idTodoPair.Value.IsCompleted) ?? false)
{
    <span class="badge is-success" style="right: .8rem; top: .8rem;">
            @_todos.Count(idTodoPair => !idTodoPair.Value.IsCompleted)
        </span>
}
</span>

<div class="quickview has-background@_color @_showClass">
    <header class="quickview-header has-background-primary@_color">
        <p class="title is-size-4 has-text-black">
            <span class="icon pr-2">
                <i class="fas fa-tasks"></i>
            </span>
            <span>@Localizer["TaskList"]</span>
        </p>
        <span class="delete" @onclick=Dismiss></span>
    </header>

    <div class="quickview-body has-dotnet-scrollbar">
        <div class="quickview-block p-4">
            @if (_isAddingTodo && _newTodo is not null)
        {
            <div class="notification">
                    <button class="delete" @onclick=CancelNewTodo></button>
                    <div class="pb-4">
                        <div class="field">
                            <label class="label">@Localizer["Task"]</label>
                            <div class="control is-expanded has-icons-left">
                                <input type="text" @bind="_newTodo.Title" class="input"
                                    placeholder="@Localizer["Task"]" />
                                <span class="icon is-small is-left">
                                    <i class="fas fa-clipboard-check"></i>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="field">
                        <div class="control">
                            <label class="checkbox">
                                <input type="checkbox" class="is-medium" @bind="_newTodo.IsCompleted" />
                                @Localizer["IsCompleted"]
                            </label>
                        </div>
                    </div>
                    <div class="field is-clearfix">
                        <button class="button is-success is-pulled-right is-medium @(_isSaving ? "is-loading" : "")"
                            @onclick=@(async _ => await OnTodoSavedAsync(_newTodo))>
                            <span class="icon is-small">
                                <i class="fas fa-save"></i>
                            </span>
                            <span>@Localizer["Save"]</span>
                        </button>
                    </div>                    
                </div>
        }
        else
        {
            <div class="pb-4">
                    <button class="button is-fullwidth is-large is-success"
                        @onclick=StartAddingTodo>
                        <span class="icon is-small">
                            <i class="fas fa-plus"></i>
                        </span>
                        <span>@Localizer["Add"]</span>
                    </button>
                </div>
        }

            @foreach (var todo in
            _todos?.OrderByDescending(t => !t.Value.IsCompleted)
                .ThenBy(t => t.Value.DueDate)
                .Select(kvp => kvp.Value) ?? Enumerable.Empty<TodoItem>())
        {
            <div class="pb-4"> 
                    <TaskCardComponent Todo=todo
                        TodoDeleted=OnTodoDeletedAsync
                        TodoUpdated=OnTodoUpdatedAsync />
                </div>
        }
        </div>
    </div>

    <footer class="quickview-footer has-background-primary@_color">
        @{
        var totals = _todos?.Count ?? 0;
        if (totals > 0)
        {
            var completed = _todos!.Count(t => t.Value.IsCompleted);
            var incomplete = totals - completed;

            LocalizedString getTotalsContent(
                int completed, int incomplete)
            {
                var allTasksCompleted = incomplete is 0;
                var noTasksCompleted = completed is 0;

                var content = (allTasksCompleted, noTasksCompleted) switch
                {
                    (true, false) => @Localizer["AllTasksCompleted"],
                    (false, true) => @Localizer["NoTasksCompleted"],
                    _ => @Localizer["TotalsFormat", completed, incomplete]
                };

                return content;
            }

            <div class="has-text-dark">
                    @getTotalsContent(completed, incomplete)
                </div>
        }
        else
        {
            <div class="has-text-dark">
                    @Localizer["NoTasksCompleted"]
                </div>                
        }
    }
    </footer>
</div>

