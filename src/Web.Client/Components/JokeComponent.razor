<!--  Copyright (c) 2021 David Pine. All rights reserved.
      Licensed under the MIT License.
-->

@inject IJokeFactory JokeFactory
@inject ILogger<JokeComponent> Logger
@inject IStringLocalizer<JokeComponent> Localizer

<article class="blazor-tile-container">
    <div class="gradient-bg jokes-gradient"></div>
    <div class="icon-overlay circle-svg"></div>
    <div class="blaze-content">
        <p class="title  is-family-code">
            <span class="is-emoji">🤓</span>
            <span class="has-text-light">@Localizer["Jokes"]</span>
        </p>
        <AdditiveSpeechComponent Message=@_jokeText />
        <div class="content">
            @if (_isLoadingJoke)
            {
                <SpinnerComponent />
            }
            else if (_jokeText is not null)
            {
                <blockquote class="has-text-black">
                    <span id="joke" class="pb-4">@_jokeText</span>
                    <br>
                    <cite>
                        &mdash;
                        <a href="@(_sourceDetails.Site.ToString())" target="_blank">
                            @(_sourceDetails.Source.ToString())
                        </a>
                    </cite>
                </blockquote>
            }
        </div>
    </div>
</article>

@code {
    private string? _jokeText = null;
    private JokeSourceDetails _sourceDetails = null!;
    private bool _isLoadingJoke = false;

    protected override Task OnInitializedAsync() =>
        RefreshJokeAsync();

    private async Task RefreshJokeAsync()
    {
        _isLoadingJoke = true;

        try
        {
            var response = await JokeFactory.GetRandomJokeAsync();
            if (response is { })
            {
                (_jokeText, _sourceDetails) = response;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
        }
        finally
        {
            _isLoadingJoke = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
